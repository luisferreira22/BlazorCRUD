
@page "/Login"
@using Model
@using Interface
@inject IAuthenticationUserService AuthenticationUserService
@inject NavigationManager NavigationManager

<h3>Login</h3>

@if (showAuthenticationError)
{
    <div class="alert alert-danger" role="alert">
        <p>@authenticationErrorText</p>
    </div>
}
<EditForm Model="oauthenticationUser" onValudSubmit="ExecuteLogin" class="card card-body bg-ligth mt-5">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group row">
        <label for="UserName" class="col-md-2 col-form-label">User:</label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="oauthenticationUser.UserName"></InputText>
            <ValidationMessage For="@(()=>oauthenticationUser.UserName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="Password" class="form-control" @bind-Value="oauthenticationUser.Password"></InputText>
            <ValidationMessage For="@(()=>oauthenticationUser.Password)" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Log in</button>
        </div>
    </div>
</EditForm>
@code {

    private AuthenticationUser oauthenticationUser = new();
    private bool showAuthenticationError = false;
    private string authenticationErrorText = "";
    private async Task ExecuteLogin()
    {
        //In real development environments this would not be a good practice.
        //authentication practice.This is a very simple authentication as an example for this example.
        NavigationManager.NavigateTo("/");

        showAuthenticationError = await AuthenticationUserService.checkAuthenticationUser(oauthenticationUser);
        if (showAuthenticationError)
        {
            //await LocalStorage.SetItemAsync<string>("username", oauthenticationUser.UserName);
            //await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        else
        {
            authenticationErrorText = "There was an error when trying to log in.";
            showAuthenticationError = true;
        }

    }

}
